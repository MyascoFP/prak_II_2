import requests
import time
import logins
from visualize import visualize_graph
from part2 import betweenness_centrality, closeness_centrality, eigenvector_centrality, build_central_graph


#–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_friends(user_id):
    url = "https://api.vk.com/method/friends.get"
    params = {
        "user_id": user_id,
        "access_token": logins.ACCESS_TOKEN,
        "v": "5.199"
    }
    response = requests.get(url, params=params).json()
    if "response" in response:
        return response["response"]["items"]
    else:
        print(f"–û—à–∏–±–∫–∞ –¥–ª—è user_id={user_id}: {response.get('error', {}).get('error_msg')}")
        return []


#–ü–æ—Å—Ç–æ–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥—Ä—É–∑–µ–π —Å –≥–ª—É–±–∏–Ω–æ–π 2
def build_friends_structure(user_ids, limit_per_user=30):
    friends_structure = {}

    for user_id in user_ids:
        print(f"\nüîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        friends = get_friends(user_id)
        friends_structure[user_id] = {}

        for friend_id in friends[:limit_per_user]:
            time.sleep(0.4)
            friends_of_friend = get_friends(friend_id)
            friends_structure[user_id][friend_id] = friends_of_friend
            print(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥—Ä—É–∑—å—è –¥–ª—è {friend_id}: {len(friends_of_friend)}")

    return friends_structure


def main():
    USER_IDS = logins.USER_ID

    friends_structure = build_friends_structure(USER_IDS, limit_per_user=30)

    print("\n‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω.")
    visualize_graph(friends_structure, limit=300)
    
    simplified = build_central_graph(friends_structure)
    print("–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≥—Ä–∞—Ñ:", simplified)
    
    print("–ü–æ—Å—Ä–µ–¥–Ω–∏—á–µ—Å—Ç–≤–æ:", betweenness_centrality(simplified))
    print("–ë–ª–∏–∑–æ—Å—Ç—å:", closeness_centrality(simplified))
    print("–°–æ–±—Å—Ç–≤. –≤–µ–∫—Ç–æ—Ä:", eigenvector_centrality(simplified))


if __name__ == "__main__":
    main()
